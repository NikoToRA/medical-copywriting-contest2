import React, { useState, useEffect, useCallback } from 'react';

const copywritingEntries = [
  "„ÅØ„Åæ„ÇãÔºÅ24ÊôÇÈñì„Å©„Åì„Åß„ÇÇÊõ∏„Åë„Çã„ÉªÁ®º„Åí„ÇãÂåªÁôÇ„É©„Ç§„Çø„Éº",
  "300Âêç„ÅÆÂ§öÊßò„Å™‰ª≤Èñì„Å®„ÄÅÂÖ±„Å´Â≠¶„Å≥„ÄÅÊàêÈï∑„Åó„ÄÅÊúàÂèé100‰∏áÂÜÜ„ÇíÁõÆÊåá„Åõ„ÇãÂ†¥ÊâÄÔºÅ\nÂåªÁôÇÂæì‰∫ãËÄÖ„ÇÇ„ÄÅ„Åù„ÅÜ„Åß„Å™„ÅÑ‰∫∫„ÇÇ„ÄÅÂ§ßÊ≠ìËøéÔºÅ",
  "ÂåªÁôÇ„ÅÆÂ∞ÇÈñÄÁü•Ë≠ò„ÇíÊ¥ª„Åã„Åó„Å¶„ÄÅ‰ªä„Åô„ÅêÂâØÊ•≠„ÇíÂßã„ÇÅ„Çà„ÅÜÔºÅ\n„Çµ„É≠„É≥ÂÖ•‰ºöÂàùÊúà„Åã„ÇâÂèéÂÖ•„ÅåÊúüÂæÖ„Åß„Åç„Åæ„Åô„ÄÇ",
  "„ÅÇ„Å™„Åü„ÅÆÂ≠¶‰ºö„Çπ„É©„Ç§„Éâ„Åå‰æ°ÂÄ§„Å´Â§â„Çè„ÇãÔºÅ\nÂåªÂ∏´Â§öÊï∞„ÅÆÂü∑Á≠Ü„ÇÆ„É´„Éâ„ÅßÂâØÊ•≠„ÇíÂßã„ÇÅ„Çà„ÅÜ",
  "WEB„Éû„Ç¨„Ç∏„É≥„ÉªË¨õÊºî„ÉªSNS„Å™„Å©„Åß„Çπ„Ç≠„É´up!\n„ÅÇ„Å™„Åü„ÅÆ„Äå„ÇÑ„Çä„Åü„ÅÑÔºÅ„Äç„Åå„Åì„Åì„Å´„ÅÇ„ÇãÔºÅ\nÂ°æÁîü„ÅØ„Åª„ÅºÂàùÂøÉËÄÖ„Çπ„Çø„Éº„ÉàÔºÅ",
  "ÁóÖÈô¢„Åß„ÅØ„Å™„Åè„ÄÅ„ÅäÂÆ∂„ÅßÁ®º„Åé„Åü„ÅÑ„Åù„Åì„ÅÆ„Ç¢„Éä„Çø‚ô°\n„ÅÇ„Å™„Åü„ÅÆÁµåÈ®ì„Åå„ÅäÈáë„Å´„Å™„ÇãÔºÅÂú®ÂÆÖ„ÉØ„Éº„ÇØ„Åß„Çµ„ÇØ„ÉÉ„Å®Á®º„ÅÑ„ÅßÊúà5‰∏áÂÜÜ„Åã„Çâ„ÅÆÂâØÊ•≠ÂèéÂÖ•„Çí‚ô™",
  "„Äå„ÅÇ„Äç„Çì„Å¶„ÅÑÂèéÂÖ•ÔºÅ\n„Äå„Åñ„Äç„Çì„Åé„Çá„ÅÜ„Å™„ÅóÔºÅ\n„Äå„Çâ„Äç„ÅÑ„ÉÜ„Ç£„É≥„Ç∞„ÅÆÂäõ„Åß\n„Äå„Åó„Äç„Çì‰∏ñÁïå„ÅÆÊââ„ÇíÈñã„Åì„ÅÜÔºÅ",
  "Ê≠£„Åó„ÅÑÂåªÁôÇÁü•Ë≠ò„ÇíÂ∫É„ÇÅ„Å¶„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞ÂÆüÁ∏æ„Çí‰∏ä„Åí„ÇãÔºÅ\n„Å©„Åì„Å´Âá∫„Åó„Å¶„ÇÇÊÅ•„Åö„Åã„Åó„Åè„Å™„ÅÑ„Éù„Éº„Éà„Éï„Ç©„É™„Ç™„ÇíÁØâ„Åè„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞Â°æ„Åß„Åô„ÄÇ",
  "‰ø°È†ºÊÄß„ÅÆÈ´ò„ÅÑ„Ç≥„É≥„ÉÜ„É≥„ÉÑ\n„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞ÊäÄË°ì„ÅÆ‰ºöÂæó\n\n„ÅÇ„Å™„Åü„ÅÆÂü∑Á≠Ü„ÅåÂåªÁôÇÊ•≠Áïå„ÇíÂ§â„Åà„Çã\n„Ç≥„Ç≥„É≠„Åä„Å©„Çã‰ΩìÈ®ì„Çí„ÄÄ„Ç¢„Ç∂„É©„Ç∑„Åß",
  "ÂâØÊ•≠„ÅßÂåªÂ∏´„ÅÆÊúàÂèé„ÇíË∂Ö„Åà„Çã„ÅÆ„ÇÇÂ§¢„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„ÇìÔºÅ",
  "1.ÂâØÊ•≠„ÅÆÊââ„ÇíÈñã„ÅÑ„Å¶„Åø„Åæ„Åõ„Çì„ÅãÔºü\n2.„ÅÇ„Å™„Åü„ÅÆÁü•Ë≠ò„Åå„ÅäÈáë„ÇíÁîü„ÇÄ\n3.„ÅÇ„Å™„Åü„ÅÆÁü•Ë≠ò„Çí„ÄÅÁ§æ‰ºö„ÅÆ„Åü„ÇÅ„Å´",
  "ÂåªÂ∏´„Åò„ÇÉ„Å™„Åè„Å¶„ÇÇ„ÄÅÊúà5‰∏áÂÜÜ‰ª•‰∏äÁ®º„Åí„Çã\nÂåªÁôÇËÅ∑Á®Æ„ÅÆ„Åü„ÇÅ„ÅÆ„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞„Ç≥„Éü„É•„Éã„ÉÜ„Ç£",
  "‰ªä„Åæ„ÅßÂ≠¶„Çì„Å†Áü•Ë≠ò„ÅßÁ§æ‰ºöË≤¢ÁåÆ„Åó„ÄÅ„Åõ„Å£„Åã„Åè„Å™„Çâ„ÅäÈáë„Å´ÊèõÁÆó„Åó„Åæ„Åõ„Çì„ÅãÔºü",
  "„ÉªÊ≠£„Åó„ÅÑÂåªÁôÇ„ÅÆÁü•Ë≠ò\n„ÉªË±äÂØå„Å™Ê°à‰ª∂„Åß„É©„Ç§„Çø„Éº„Å®„Åó„Å¶„ÅÆËá™‰ø°„Å®ÂÆüÁ∏æ\n„ÉªÊñáÂ≠óÂçò‰æ°10ÂÜÜ„Å∏„ÅÆÈÅìÁ≠ã\n\n„Åì„Çå„ÄÅÂÖ®„Å¶Êâã„Å´ÂÖ•„Çä„Åæ„Åô„ÄÇ",
  "„ÅÇ„Å™„Åü„ÅÆÁµåÈ®ì„Åå„ÅäÈáë„Å´„Å™„ÇãÔºÅÂú®ÂÆÖ„ÉØ„Éº„ÇØ„Åß„Çµ„ÇØ„ÉÉ„Å®Á®º„ÅÑ„ÅßÊúà5‰∏á„Åã„Çâ„ÅÆÂâØÊ•≠ÂèéÂÖ•„Çí‚ô™"
];

const colors = [
  '#FF6384', '#36A2EB', '#FFCE56', '#4BC0C0', '#9966FF', 
  '#FF9F40', '#F29E4C', '#1C7C54', '#577590', '#F94144', 
  '#F3722C', '#F8961E', '#F9C74F', '#90BE6D', '#43AA8B'
];

const VotingForm = () => {
  const [voteCounts, setVoteCounts] = useState({});
  const [selectedEntries, setSelectedEntries] = useState([]);
  const [voteHistory, setVoteHistory] = useState([]);
  const [voterName, setVoterName] = useState('');
  const [voters, setVoters] = useState([]);
  const [error, setError] = useState('');
  const [showGraph, setShowGraph] = useState(false);

  useEffect(() => {
    const initialVoteCounts = copywritingEntries.reduce((acc, entry) => ({ ...acc, [entry]: 0 }), {});
    setVoteCounts(initialVoteCounts);
    setVoteHistory([initialVoteCounts]);
    const timer = setTimeout(() => setShowGraph(true), 500);
    return () => clearTimeout(timer);
  }, []);

  const handleSelection = useCallback((entry) => {
    setSelectedEntries(prev => {
      if (prev.includes(entry)) {
        return prev.filter(e => e !== entry);
      } else if (prev.length < 3) {
        return [...prev, entry];
      }
      return prev;
    });
  }, []);

  const handleVote = useCallback(() => {
    if (selectedEntries.length !== 3) {
      setError('3„Å§„ÅÆ„Ç®„É≥„Éà„É™„Éº„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return;
    }
    if (!voterName.trim()) {
      setError('ÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ');
      return;
    }
    if (voters.includes(voterName)) {
      setError('„Åô„Åß„Å´ÊäïÁ•®Ê∏à„Åø„Åß„Åô„ÄÇ');
      return;
    }

    setVoteCounts(prev => {
      const newCounts = { ...prev };
      selectedEntries.forEach(entry => {
        newCounts[entry] = (newCounts[entry] || 0) + 1;
      });
      setVoteHistory(hist => [...hist, newCounts]);
      return newCounts;
    });
    setSelectedEntries([]);
    setVoters(prev => [...prev, voterName]);
    setVoterName('');
    setError('');
  }, [selectedEntries, voterName, voters]);

  const sortedEntries = Object.entries(voteCounts).sort((a, b) => b[1] - a[1]);

  return (
    <div className="max-w-7xl mx-auto p-6 bg-gradient-to-r from-blue-50 to-indigo-100 min-h-screen">
      <h1 className="text-4xl font-bold mb-8 text-center text-indigo-800">ÂåªÁôÇ„Ç≥„Éî„Éº„É©„Ç§„ÉÜ„Ç£„É≥„Ç∞„Ç≥„É≥„ÉÜ„Çπ„Éà</h1>
      
      <div className="mb-8">
        <input
          type="text"
          value={voterName}
          onChange={(e) => setVoterName(e.target.value)}
          placeholder="„ÅÇ„Å™„Åü„ÅÆÂêçÂâç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ"
          className="w-full p-3 border-2 border-indigo-300 rounded-lg focus:border-indigo-500 focus:ring focus:ring-indigo-200 transition"
        />
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="voting-section bg-white p-6 rounded-xl shadow-lg">
          <h2 className="text-2xl font-semibold mb-6 text-indigo-700">„ÅäÊ∞ó„Å´ÂÖ•„Çä„ÅÆ„Ç≥„Éî„Éº„Çí3„Å§ÈÅ∏„Çì„Åß„Åè„Å†„Åï„ÅÑ</h2>
          <div className="space-y-4 mb-6 max-h-[60vh] overflow-y-auto pr-4">
            {copywritingEntries.map((entry, index) => (
              <button
                key={index}
                onClick={() => handleSelection(entry)}
                className={`w-full text-left p-4 rounded-lg transition-all duration-300 ${
                  selectedEntries.includes(entry)
                    ? 'bg-indigo-100 border-indigo-500 border-2 shadow-md'
                    : 'bg-gray-50 hover:bg-gray-100 border border-gray-200'
                }`}
              >
                <span className="font-bold mr-2 text-indigo-600">{index + 1}.</span>
                <span className="whitespace-pre-wrap">{entry}</span>
              </button>
            ))}
          </div>
          <button
            onClick={handleVote}
            className="w-full py-3 px-4 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 transition-colors duration-300 font-semibold text-lg"
          >
            ÊäïÁ•®„Åô„Çã ({selectedEntries.length}/3)
          </button>
          {error && <p className="text-red-500 mt-2 text-center">{error}</p>}
        </div>

        <div className="ranking-section bg-white p-6 rounded-xl shadow-lg">
          <h2 className="text-2xl font-semibold mb-6 text-indigo-700">ÁèæÂú®„ÅÆ„É©„É≥„Ç≠„É≥„Ç∞</h2>
          <div className="space-y-4 max-h-[60vh] overflow-y-auto pr-4">
            {sortedEntries.map(([entry, count], index) => (
              <div key={index} className="bg-gray-50 p-4 rounded-lg shadow transition-all duration-300 hover:shadow-md">
                <div className="flex justify-between items-center">
                  <span className="font-bold text-lg" style={{color: colors[index]}}>
                    {index === 0 && 'üëë '}
                    {index + 1}‰Ωç
                  </span>
                  <span className="font-semibold text-indigo-600">{count} Á•®</span>
                </div>
                <p className="mt-2 text-gray-700 whitespace-pre-wrap">{entry}</p>
              </div>
            ))}
          </div>
        </div>
      </div>

      <div className="mt-12 bg-black p-6 rounded-xl shadow-lg">
        <h2 className="text-2xl font-semibold mb-6 text-white">„É©„É≥„Ç≠„É≥„Ç∞Êé®Áßª</h2>
        <div className="relative" style={{ height: '400px' }}>
          <svg width="100%" height="100%" viewBox="0 0 1000 400">
            <line x1="50" y1="350" x2="950" y2="350" stroke="#4B5563" strokeWidth="2" />
            <line x1="50" y1="50" x2="50" y2="350" stroke="#4B5563" strokeWidth="2" />
            
            {Array.from({ length: Math.min(10, voteHistory.length) }, (_, i) => (
              <text key={i} x={50 + (900 / Math.min(9, voteHistory.length - 1)) * i} y="370" textAnchor="middle" fill="#9CA3AF">{i + 1}</text>
            ))}
            
            {Array.from({ length: 6 }, (_, i) => (
              <text key={i} x="40" y={350 - i * 60} textAnchor="end" fill="#9CA3AF">{i * 2}</text>
            ))}

            {Array.from({ length: 6 }, (_, i) => (
              <line key={i} x1="50" y1={350 - i * 60} x2="950" y2={350 - i * 60} stroke="#4B5563" strokeWidth="1" />
            ))}

            {showGraph && copywritingEntries.map((entry, entryIndex) => {
              const points = voteHistory.map((votes, index) => 
                `${50 + (900 / Math.max(1, voteHistory.length - 1)) * index},${350 - (votes[entry] || 0) * 30}`
              ).join(' ');
              const isFirstPlace = sortedEntries[0] && sortedEntries[0][0] === entry;

              return (
                <g key={entryIndex}>
                  <polyline
                    points={points}
                    fill="none"
                    stroke={colors[entryIndex]}
                    strokeWidth={isFirstPlace ? "4" : "2"}
                  />
                  {isFirstPlace && (
                    <text
                      x={points.split(' ').pop().split(',')[0]}
                      y={points.split(' ').pop().split(',')[1]}
                      fontSize="20"
                      fill={colors[entryIndex]}
                      textAnchor="middle"
                    >
                      üëë
                    </text>
                  )}
                </g>
              );
            })}
          </svg>
        </div>
        <div className="mt-6 flex flex-wrap justify-center">
          {copywritingEntries.map((_, index) => (
            <div key={index} className="flex items-center mr-4 mb-2 bg-gray-800 rounded-full px-3 py-1">
              <div style={{ width: '12px', height: '12px', backgroundColor: colors[index], marginRight: '5px', borderRadius: '50%' }}></div>
              <span className="text-sm text-gray-300">{index + 1}</span>
            </div>
          ))}
        </div>
      </div>

      <div className="mt-8 bg-white p-6 rounded-xl shadow-lg">
        <h3 className="text-xl font-semibold mb-4 text-indigo-700">ÊäïÁ•®ËÄÖ‰∏ÄË¶ß</h3>
        <p className="text-gray-700">{voters.join(', ')}</p>
      </div>
    </div>
  );
};

export default VotingForm;